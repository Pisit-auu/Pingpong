"use client";

import React, { useMemo, useState } from "react";

// --- Mock data: ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏Å‡πâ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°/‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ---
// ‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û: ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏õ‡∏¢‡∏±‡∏á "key" ‡∏ï‡πà‡∏≤‡∏á ‡πÜ
// ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏ß‡πà‡∏≤ key ‡πÑ‡∏´‡∏ô‡πÄ‡∏î‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î

type KeyId = "sun" | "water" | "soil" | "wind"; // ‡∏ò‡∏µ‡∏°‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å "Blooming"

interface Choice {
  id: string;
  label: string;
  // ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡πà‡∏≠ key ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß
  weights: Partial<Record<KeyId, number>>;
}

interface Question {
  id: string;
  title: string;
  choices: Choice[];
}

const QUESTIONS: Question[] = [
  {
    id: "q1",
    title: "‡πÄ‡∏ä‡πâ‡∏≤‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏±‡∏Å‡∏à‡∏∞‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£?",
    choices: [
      { id: "q1a", label: "‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡πÄ‡∏à‡∏≠‡πÅ‡∏î‡∏î ‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ö‡∏≤ ‡πÜ", weights: { sun: 2, wind: 1 } },
      { id: "q1b", label: "‡∏£‡∏î‡∏ô‡πâ‡∏≥‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ ‡∏à‡∏±‡∏î‡∏ö‡πâ‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏™‡∏î‡∏ä‡∏∑‡πà‡∏ô", weights: { water: 2, soil: 1 } },
      { id: "q1c", label: "‡∏Ñ‡∏≤‡πÄ‡∏ü‡πà‡πÄ‡∏á‡∏µ‡∏¢‡∏ö ‡πÜ ‡∏≠‡πà‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠", weights: { soil: 2 } },
      { id: "q1d", label: "‡∏ó‡∏£‡∏¥‡∏õ‡∏™‡∏±‡πâ‡∏ô ‡πÜ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏Å‡∏≤‡∏®", weights: { wind: 2, sun: 1 } },
    ],
  },
  {
    id: "q2",
    title: "‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà ‡∏Ñ‡∏∏‡∏ì‡πÇ‡∏ü‡∏Å‡∏±‡∏™‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å?",
    choices: [
      { id: "q2a", label: "‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏° ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡∏ç‡πà ‡πÅ‡∏•‡∏∞‡πÄ‡∏î‡∏î‡πÑ‡∏•‡∏ô‡πå", weights: { sun: 2 } },
      { id: "q2b", label: "‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà", weights: { soil: 2 } },
      { id: "q2c", label: "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô ‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå", weights: { wind: 2 } },
      { id: "q2d", label: "‡∏Ñ‡∏ô‡πÉ‡∏ô‡∏ó‡∏µ‡∏°‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÑ‡∏´‡∏•‡∏•‡∏∑‡πà‡∏ô", weights: { water: 2 } },
    ],
  },
  {
    id: "q3",
    title: "‡∏Ñ‡∏≥‡πÑ‡∏´‡∏ô‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î",
    choices: [
      { id: "q3a", label: "‡∏™‡∏î‡πÉ‡∏™ ‡∏°‡∏∏‡πà‡∏á‡∏°‡∏±‡πà‡∏ô", weights: { sun: 2 } },
      { id: "q3b", label: "‡∏™‡∏á‡∏ö ‡∏•‡∏∏‡πà‡∏°‡∏•‡∏∂‡∏Å", weights: { soil: 2 } },
      { id: "q3c", label: "‡∏•‡∏∑‡πà‡∏ô‡πÑ‡∏´‡∏• ‡πÄ‡∏≠‡∏∑‡πâ‡∏≠‡πÄ‡∏ü‡∏∑‡πâ‡∏≠", weights: { water: 2 } },
      { id: "q3d", label: "‡∏û‡∏•‡∏¥‡πâ‡∏ß‡πÑ‡∏´‡∏ß ‡∏ä‡∏≠‡∏ö‡∏•‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà", weights: { wind: 2 } },
    ],
  },
  {
    id: "q4",
    title: "‡πÄ‡∏ß‡∏•‡∏≤‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤ ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏±‡∏Å‡∏à‡∏∞‚Ä¶",
    choices: [
      { id: "q4a", label: "‡∏•‡∏∏‡∏¢‡πÅ‡∏Å‡πâ‡∏ï‡∏£‡∏á‡∏à‡∏∏‡∏î ‡πÇ‡∏ü‡∏Å‡∏±‡∏™‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢", weights: { sun: 2 } },
      { id: "q4b", label: "‡∏ä‡∏∞‡∏•‡∏≠ ‡∏î‡∏π‡∏£‡∏≤‡∏Å‡πÄ‡∏´‡∏á‡πâ‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏ö‡∏ö", weights: { soil: 2 } },
      { id: "q4c", label: "‡∏ñ‡∏≤‡∏° ‡∏£‡∏±‡∏ö‡∏ü‡∏±‡∏á ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ú‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô", weights: { water: 2 } },
      { id: "q4d", label: "‡∏î‡∏π‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏•‡∏≤‡∏¢ ‡πÜ ‡∏ó‡∏≤‡∏á ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÄ‡∏•‡∏¢", weights: { wind: 2 } },
    ],
  },
  {
    id: "q5",
    title: "‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÑ‡∏î‡πâ‡∏û‡∏•‡∏±‡∏á",
    choices: [
      { id: "q5a", label: "‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á ‡πÅ‡∏î‡∏î‡∏î‡∏µ ‡πÜ", weights: { sun: 2 } },
      { id: "q5b", label: "‡∏à‡∏±‡∏î‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏á‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏á", weights: { soil: 2 } },
      { id: "q5c", label: "‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Ñ‡∏ô ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Å‡∏±‡∏ô", weights: { water: 2 } },
      { id: "q5d", label: "‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á ‡∏Ñ‡∏¥‡∏î‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡πÉ‡∏´‡∏°‡πà ‡πÜ", weights: { wind: 2 } },
    ],
  },
];

// ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ key
const KEY_META: Record<
  KeyId,
  { title: string; description: string; emoji: string; accent: string }
> = {
  sun: {
    title: "Sun Key",
    description:
      "‡∏û‡∏•‡∏±‡∏á‡∏Ç‡∏±‡∏ö‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡∏°‡∏∏‡πà‡∏á‡∏™‡∏π‡πà‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ ‡∏à‡∏∏‡∏î‡πÑ‡∏ü‡πÉ‡∏´‡πâ‡∏ó‡∏µ‡∏°‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏î‡∏µ",
    emoji: "‚òÄÔ∏è",
    accent: "from-amber-300 to-orange-400",
  },
  water: {
    title: "Water Key",
    description:
      "‡∏•‡∏∑‡πà‡∏ô‡πÑ‡∏´‡∏• ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏ú‡∏π‡πâ‡∏Ñ‡∏ô ‡πÄ‡∏Å‡πà‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏ä‡∏∏‡∏ö‡∏ä‡∏π‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏Å‡∏≤‡∏®‡∏£‡πà‡∏ß‡∏°‡∏á‡∏≤‡∏ô",
    emoji: "üíß",
    accent: "from-sky-300 to-cyan-400",
  },
  soil: {
    title: "Soil Key",
    description:
      "‡∏°‡∏±‡πà‡∏ô‡∏Ñ‡∏á ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏ö ‡∏£‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡πÅ‡∏ô‡πà‡∏ô ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏¢‡∏±‡πà‡∏á‡∏¢‡∏∑‡∏ô",
    emoji: "üå±",
    accent: "from-lime-300 to-emerald-400",
  },
  wind: {
    title: "Wind Key",
    description:
      "‡∏Ñ‡∏•‡πà‡∏≠‡∏á‡∏ï‡∏±‡∏ß ‡∏ä‡∏≠‡∏ö‡∏ó‡∏î‡∏•‡∏≠‡∏á ‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏¥‡πà‡∏á‡πÉ‡∏´‡∏°‡πà ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡πÇ‡∏≠‡∏Å‡∏≤‡∏™",
    emoji: "üå¨Ô∏è",
    accent: "from-violet-300 to-fuchsia-400",
  },
};

// --- UI Components ---

function ProgressBar({ value }: { value: number }) {
  return (
    <div className="w-full h-2 bg-gray-200 rounded-full">
      <div
        className="h-2 rounded-full bg-gradient-to-r from-indigo-400 to-purple-500 transition-all duration-300"
        style={{ width: `${value}%` }}
      />
    </div>
  );
}

function ChoiceItem({
  choice,
  selected,
  onSelect,
}: {
  choice: Choice;
  selected: boolean;
  onSelect: () => void;
}) {
  return (
    <button
      onClick={onSelect}
      className={`w-full text-left p-4 rounded-2xl border mb-3 transition-all hover:shadow-md focus:outline-none focus:ring-2 focus:ring-indigo-400 ${
        selected ? "border-indigo-500 bg-indigo-50" : "border-gray-200 bg-white"
      }`}
    >
      <div className="flex items-start gap-3">
        <div
          aria-hidden
          className={`mt-1 size-4 rounded-full border ${
            selected ? "border-indigo-600 bg-indigo-600" : "border-gray-400"
          }`}
        />
        <span className="leading-relaxed">{choice.label}</span>
      </div>
    </button>
  );
}

function Intro({ onStart }: { onStart: () => void }) {
  return (
    <div className="max-w-2xl mx-auto text-center py-16 px-4">
      <div className="inline-flex items-center gap-3 px-4 py-2 rounded-full bg-gradient-to-r from-indigo-100 to-purple-100 text-indigo-700 text-sm font-medium">
        <span>üéØ ‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ ~5-10 ‡∏ô‡∏≤‡∏ó‡∏µ</span>
      </div>
      <h1 className="text-3xl md:text-4xl font-bold mt-6">
        My{" "}
        <span className="text-transparent bg-clip-text bg-gradient-to-r from-indigo-500 to-purple-600">
          Blooming Key
        </span>
      </h1>
      <p className="text-gray-600 mt-3">
        ‡∏Ñ‡πâ‡∏ô &quot;‡∏Å‡∏∏‡∏ç‡πÅ‡∏à&quot; ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
      </p>
      <div className="mt-10">
        <button
          onClick={onStart}
          className="px-6 py-3 rounded-2xl bg-indigo-600 text-white font-semibold hover:bg-indigo-700 shadow-lg"
        >
          ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        </button>
      </div>
    </div>
  );
}

function Result({
  bestKey,
  onRestart,
  scores,
}: {
  bestKey: KeyId;
  onRestart: () => void;
  scores: Record<KeyId, number>;
}) {
  const meta = KEY_META[bestKey];
  const percent = useMemo(() => {
    const total = Object.values(scores).reduce((a, b) => a + b, 0) || 1;
    const entries = (Object.keys(scores) as KeyId[]).map((k) => ({
      k,
      v: Math.round((scores[k] / total) * 100),
    }));
    return entries;
  }, [scores]);

  const share = async () => {
    const text = `‡∏â‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠ ${meta.emoji} ${meta.title} ‚Äì ${meta.description}`;
    const url = typeof window !== "undefined" ? window.location.href : "";
    if (navigator.share) {
      try {
        await navigator.share({ title: "My Blooming Key", text, url });
      } catch (_) {}
    } else {
      try {
        await navigator.clipboard.writeText(`${text} \n${url}`);
        alert("‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ä‡∏£‡πå‡πÅ‡∏•‡πâ‡∏ß");
      } catch (_) {}
    }
  };

  return (
    <div className="max-w-2xl mx-auto text-center py-16 px-4">
      <div
        className={`mx-auto w-24 h-24 rounded-3xl bg-gradient-to-br ${meta.accent} grid place-items-center text-4xl`}
      >
        <span>{meta.emoji}</span>
      </div>
      <h2 className="text-3xl font-bold mt-6">‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ {meta.title}</h2>
      <p className="text-gray-600 mt-3">{meta.description}</p>

      <div className="mt-8 text-left">
        <h3 className="font-semibold mb-2">‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏û‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</h3>
        <div className="space-y-2">
          {percent.map(({ k, v }) => (
            <div key={k}>
              <div className="flex justify-between text-sm text-gray-600">
                <span>
                  {KEY_META[k].emoji} {KEY_META[k].title}
                </span>
                <span>{v}%</span>
              </div>
              <div className="h-2 bg-gray-200 rounded-full">
                <div
                  className={`h-2 rounded-full bg-gradient-to-r ${KEY_META[k].accent}`}
                  style={{ width: `${v}%` }}
                />
              </div>
            </div>
          ))}
        </div>
      </div>

      <div className="mt-10 flex flex-wrap items-center justify-center gap-3">
        <button
          onClick={share}
          className="px-5 py-2.5 rounded-xl bg-indigo-600 text-white font-medium hover:bg-indigo-700"
        >
          ‡πÅ‡∏ä‡∏£‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        </button>
        <button
          onClick={onRestart}
          className="px-5 py-2.5 rounded-xl border border-gray-300 hover:bg-gray-50"
        >
          ‡∏ó‡∏≥‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        </button>
      </div>
    </div>
  );
}

export default function Page() {
  const [step, setStep] = useState<"intro" | "quiz" | "result">("intro");
  const [cursor, setCursor] = useState(0); // index ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  const [answers, setAnswers] = useState<Record<string, string>>({}); // questionId -> choiceId

  const progress = Math.round((cursor / QUESTIONS.length) * 100);

  const current = QUESTIONS[cursor];

  const selectChoice = (qId: string, choiceId: string) => {
    setAnswers((prev) => ({ ...prev, [qId]: choiceId }));
  };

  const next = () => {
    if (cursor < QUESTIONS.length - 1) setCursor((c) => c + 1);
    else setStep("result");
  };

  const prev = () => setCursor((c) => Math.max(0, c - 1));

  const restart = () => {
    setStep("intro");
    setCursor(0);
    setAnswers({});
  };

  const scores: Record<KeyId, number> = useMemo(() => {
    const s: Record<KeyId, number> = { sun: 0, water: 0, soil: 0, wind: 0 };
    for (const q of QUESTIONS) {
      const cid = answers[q.id];
      const ch = q.choices.find((c) => c.id === cid);
      if (ch?.weights) {
        for (const [k, v] of Object.entries(ch.weights)) {
          s[k as KeyId] += v ?? 0;
        }
      }
    }
    return s;
  }, [answers]);

  const bestKey: KeyId = useMemo(() => {
    return (Object.keys(scores) as KeyId[]).reduce((best, k) =>
      scores[k] > scores[best] ? k : best
    , "sun");
  }, [scores]);

  if (step === "intro") return <Intro onStart={() => setStep("quiz")} />;

  if (step === "result") return <Result bestKey={bestKey} scores={scores} onRestart={restart} />;

  // --- Quiz Step ---
  return (
    <div className="max-w-3xl mx-auto py-10 px-4">
      <div className="mb-6">
        <ProgressBar value={progress} />
        <div className="mt-2 text-sm text-gray-600">
          ‡∏Ç‡πâ‡∏≠ {cursor + 1} / {QUESTIONS.length}
        </div>
      </div>

      <div className="bg-white border rounded-3xl p-6 shadow-sm">
        <h2 className="text-xl font-bold mb-4">{current.title}</h2>
        <div>
          {current.choices.map((c) => (
            <ChoiceItem
              key={c.id}
              choice={c}
              selected={answers[current.id] === c.id}
              onSelect={() => selectChoice(current.id, c.id)}
            />
          ))}
        </div>
      </div>

      <div className="mt-6 flex items-center justify-between">
        <button
          onClick={prev}
          disabled={cursor === 0}
          className="px-5 py-2.5 rounded-xl border border-gray-300 disabled:opacity-40 hover:bg-gray-50"
        >
          ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
        </button>
        <button
          onClick={next}
          disabled={!answers[current.id]}
          className="px-5 py-2.5 rounded-xl bg-indigo-600 text-white font-medium disabled:bg-indigo-300"
        >
          {cursor === QUESTIONS.length - 1 ? "‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå" : "‡∏ñ‡∏±‡∏î‡πÑ‡∏õ"}
        </button>
      </div>
    </div>
  );
}